// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PickAuto.Models;

namespace PickAuto.Migrations
{
    [DbContext(typeof(PickAutoContext))]
    partial class PickAutoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PickAuto.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("CityId");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PickAuto.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarModelId");

                    b.Property<int>("CarStatudId");

                    b.Property<int?>("CarStatusId");

                    b.Property<long>("Mileage");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CarId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("CarStatusId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("PickAuto.Models.CarModel", b =>
                {
                    b.Property<int>("CarModelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FuelTypeId");

                    b.Property<int>("GearboxId");

                    b.Property<int>("ManufacturerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("NumberOfSeats");

                    b.Property<DateTime>("ProductionYear");

                    b.Property<int>("WheelDriveId");

                    b.HasKey("CarModelId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("GearboxId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("WheelDriveId");

                    b.ToTable("CarModel");
                });

            modelBuilder.Entity("PickAuto.Models.CarStatus", b =>
                {
                    b.Property<int>("CarStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("CarStatusId");

                    b.ToTable("CarStatus");
                });

            modelBuilder.Entity("PickAuto.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("PickAuto.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("PickAuto.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("PickAuto.Models.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("FuelTypeId");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("PickAuto.Models.Gearbox", b =>
                {
                    b.Property<int>("GearboxId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("GearboxId");

                    b.ToTable("GearBox");
                });

            modelBuilder.Entity("PickAuto.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("ManufacturerId");

                    b.HasIndex("CountryId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("PickAuto.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarForeignKey");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<int?>("WorkerId");

                    b.HasKey("PurchaseId");

                    b.HasIndex("CarForeignKey")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("PickAuto.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarForeignKey");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<DateTime>("RentalEnd");

                    b.Property<DateTime>("RentalStart");

                    b.Property<int?>("WorkerId");

                    b.HasKey("RentalId");

                    b.HasIndex("CarForeignKey")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("PickAuto.Models.Store", b =>
                {
                    b.Property<int>("StoreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.HasKey("StoreId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("PickAuto.Models.WheelDrive", b =>
                {
                    b.Property<int>("WheelDriveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("WheelDriveId");

                    b.ToTable("WheelDrive");
                });

            modelBuilder.Entity("PickAuto.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StoreId");

                    b.HasKey("WorkerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("PickAuto.Models.Address", b =>
                {
                    b.HasOne("PickAuto.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PickAuto.Models.Car", b =>
                {
                    b.HasOne("PickAuto.Models.CarModel", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PickAuto.Models.CarStatus", "CarStatus")
                        .WithMany("Cars")
                        .HasForeignKey("CarStatusId");
                });

            modelBuilder.Entity("PickAuto.Models.CarModel", b =>
                {
                    b.HasOne("PickAuto.Models.FuelType", "FuelType")
                        .WithMany("CarModels")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PickAuto.Models.Gearbox", "Gearbox")
                        .WithMany("CarModels")
                        .HasForeignKey("GearboxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PickAuto.Models.Manufacturer", "Manufacturer")
                        .WithMany("CarModels")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PickAuto.Models.WheelDrive", "WheelDrive")
                        .WithMany("CarModels")
                        .HasForeignKey("WheelDriveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PickAuto.Models.City", b =>
                {
                    b.HasOne("PickAuto.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PickAuto.Models.Customer", b =>
                {
                    b.HasOne("PickAuto.Models.Address", "Address")
                        .WithOne("Customer")
                        .HasForeignKey("PickAuto.Models.Customer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PickAuto.Models.Manufacturer", b =>
                {
                    b.HasOne("PickAuto.Models.Country", "Country")
                        .WithMany("Manufacturers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PickAuto.Models.Purchase", b =>
                {
                    b.HasOne("PickAuto.Models.Car", "Car")
                        .WithOne("Purchase")
                        .HasForeignKey("PickAuto.Models.Purchase", "CarForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PickAuto.Models.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId");

                    b.HasOne("PickAuto.Models.Worker", "Worker")
                        .WithMany("Purchases")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("PickAuto.Models.Rental", b =>
                {
                    b.HasOne("PickAuto.Models.Car", "Car")
                        .WithOne("Rental")
                        .HasForeignKey("PickAuto.Models.Rental", "CarForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PickAuto.Models.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId");

                    b.HasOne("PickAuto.Models.Worker", "Worker")
                        .WithMany("Rentals")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("PickAuto.Models.Store", b =>
                {
                    b.HasOne("PickAuto.Models.Address", "Address")
                        .WithOne("Store")
                        .HasForeignKey("PickAuto.Models.Store", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PickAuto.Models.Worker", b =>
                {
                    b.HasOne("PickAuto.Models.Store", "Store")
                        .WithMany("Workers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
